db:
  paths:
    - path: /var/cloudconductor/backups/postgresql_master
      prepare_path: true
      schedule: "0 0 * * *"
      script:
        pre_backup: ! '(source /opt/cloudconductor/config; CONSUL_SECRET_KEY_ENCODED="`/opt/chefdk/embedded/bin/ruby -e \"require ''cgi''; puts CGI::escape(''${CONSUL_SECRET_KEY}'')\"`"; self_hostname=`hostname`; self_ip_address=`/usr/local/bin/consul members | egrep "^${self_hostname} " | awk ''{print $2}'' | awk -F: ''{print $1}''`; for retry in `seq 1 10`; do primary_ip_address=`curl http://localhost:8500/v1/catalog/service/postgresql?tag=primary | jq ''.[] | .Address'' | sed -e ''s/[^"]*"\([^"]*\)".*/\1/''`; if [ -n "${primary_ip_address}" ]; then break; fi; sleep 3; done; rm -rf /var/cloudconductor/backups/postgresql_master/*; if [ "${self_ip_address}" == "${primary_ip_address}" ]; then sudo -u postgres pg_basebackup -D /var/cloudconductor/backups/postgresql_master --xlog --verbose -h 127.0.0.1 -U replication; sudo -u root chown -R amandabackup:disk /var/cloudconductor/backups/postgresql_master; fi) >/dev/null 2>&1'
        post_restore: ! '(source /opt/cloudconductor/config; CONSUL_SECRET_KEY_ENCODED="`/opt/chefdk/embedded/bin/ruby -e \"require ''cgi''; puts CGI::escape(''${CONSUL_SECRET_KEY}'')\"`"; self_hostname=`hostname`; self_ip_address=`/usr/local/bin/consul members | egrep "^${self_hostname} " | awk ''{print $2}'' | awk -F: ''{print $1}''`; for retry in `seq 1 10`; do primary_ip_address=`curl http://localhost:8500/v1/catalog/service/postgresql?tag=primary | jq ''.[] | .Address'' | sed -e ''s/[^"]*"\([^"]*\)".*/\1/''`; primary_hostname=`curl http://localhost:8500/v1/catalog/service/postgresql?tag=primary | jq ''.[] | .Node'' | sed -e ''s/[^"]*"\([^"]*\)".*/\1/''`; if [ -n "${primary_ip_address}" -a -n "${primary_hostname}" ]; then break; fi; sleep 3; done; restore_event_id=`curl -X GET http://localhost:8500/v1/event/list?name=restore | jq ''.[] | .ID'' | tail -n1 | sed -e ''s/[^"]*"\([^"]*\)".*/\1/''`; if [ "${self_ip_address}" == "${primary_ip_address}" ]; then curl -X PUT http://localhost:8500/v1/kv/cloudconductor/postgresql/failover-event/lock?token=${CONSUL_SECRET_KEY_ENCODED} -d ''true''; sudo -u root service postgresql-9.4 stop; sudo -u root rm -rf /var/lib/pgsql/9.4/data; sudo -u root mv /var/cloudconductor/backups/postgresql_master /var/lib/pgsql/9.4/data; sudo -u root chown -R postgres:postgres /var/lib/pgsql/9.4/data; sudo -u root chmod 700 /var/lib/pgsql/9.4/data; sudo -u root mkdir -p /var/cloudconductor/backups/postgresql_master; sudo -u root chown amandabackup:disk /var/cloudconductor/backups/postgresql_master; sudo -u root chmod 777 /var/cloudconductor/backups/postgresql_master; sudo -u root service postgresql-9.4 start; curl -X DELETE http://localhost:8500/v1/kv/cloudconductor/postgresql/failover-event/lock?token=${CONSUL_SECRET_KEY_ENCODED}; fi) >/dev/null 2>&1'
      restore_enabled: true
    - path: /var/cloudconductor/backups/postgresql_slave
      prepare_path: true
      schedule: "0 0 * * *"
      script:
        pre_backup: ! '(source /opt/cloudconductor/config; CONSUL_SECRET_KEY_ENCODED="`/opt/chefdk/embedded/bin/ruby -e \"require ''cgi''; puts CGI::escape(''${CONSUL_SECRET_KEY}'')\"`"; self_hostname=`hostname`; self_ip_address=`/usr/local/bin/consul members | egrep "^${self_hostname} " | awk ''{print $2}'' | awk -F: ''{print $1}''`; for retry in `seq 1 10`; do primary_ip_address=`curl http://localhost:8500/v1/catalog/service/postgresql?tag=primary | jq ''.[] | .Address'' | sed -e ''s/[^"]*"\([^"]*\)".*/\1/''`; if [ -n "${primary_ip_address}" ]; then break; fi; sleep 3; done; rm -rf /var/cloudconductor/backups/postgresql_slave/*; if [ "${self_ip_address}" != "${primary_ip_address}" ]; then sudo -u postgres pg_basebackup -D /var/cloudconductor/backups/postgresql_slave --xlog --verbose -h 127.0.0.1 -U replication; sudo -u root chown -R amandabackup:disk /var/cloudconductor/backups/postgresql_slave; fi) >/dev/null 2>&1'
        post_restore: ! '(source /opt/cloudconductor/config; CONSUL_SECRET_KEY_ENCODED="`/opt/chefdk/embedded/bin/ruby -e \"require ''cgi''; puts CGI::escape(''${CONSUL_SECRET_KEY}'')\"`"; self_hostname=`hostname`; self_ip_address=`/usr/local/bin/consul members | egrep "^${self_hostname} " | awk ''{print $2}'' | awk -F: ''{print $1}''`; for retry in `seq 1 10`; do primary_ip_address=`curl http://localhost:8500/v1/catalog/service/postgresql?tag=primary | jq ''.[] | .Address'' | sed -e ''s/[^"]*"\([^"]*\)".*/\1/''`; primary_hostname=`curl http://localhost:8500/v1/catalog/service/postgresql?tag=primary | jq ''.[] | .Node'' | sed -e ''s/[^"]*"\([^"]*\)".*/\1/''`; if [ -n "${primary_ip_address}" -a -n "${primary_hostname}" ]; then break; fi; sleep 3; done; restore_event_id=`curl -X GET http://localhost:8500/v1/event/list?name=restore | jq ''.[] | .ID'' | tail -n1 | sed -e ''s/[^"]*"\([^"]*\)".*/\1/''`; if [ "${self_ip_address}" != "${primary_ip_address}" ]; then for retry in `seq 1 10`; do return_code=`curl http://localhost:8500/v1/kv/event/${restore_event_id}/${primary_hostname}?token=${CONSUL_SECRET_KEY_ENCODED} | jq ''.[] | .Value'' | sed -e ''s/[^"]*"\([^"]*\)".*/\1/'' | base64 -d | jq ''.return_code'' | sed -e ''s/[^"]*"\([^"]*\)".*/\1/''`; if [ "${return_code}" == "null" ]; then sleep 10; continue; elif [ "${return_code}" == "0" ]; then break; else exit 1; fi; done; configure_event_id=`/usr/local/bin/consul event -name="configure" -node="${primary_hostname}" "${CONSUL_SECRET_KEY}" | awk ''{print $3}''`; for retry in `seq 1 10`; do return_code=`curl http://localhost:8500/v1/kv/event/${configure_event_id}/${primary_hostname}?token=${CONSUL_SECRET_KEY_ENCODED} | jq ''.[] | .Value'' | sed -e ''s/[^"]*"\([^"]*\)".*/\1/'' | base64 -d | jq ''.return_code'' | sed -e ''s/[^"]*"\([^"]*\)".*/\1/''`; if [ "${return_code}" == "null" -o -z "${return_code}" ]; then sleep 10; continue; elif [ "${return_code}" == "0" ]; then break; else exit 1; fi; done; sudo -u root service postgresql-9.4 stop; sudo -u root rm -rf /var/cloudconductor/backups/postgresql; sudo -u root mkdir -p /var/cloudconductor/backups/postgresql; sudo -u root chown amandabackup:disk /var/cloudconductor/backups/postgresql; sudo -u root chmod 777 /var/cloudconductor/backups/postgresql; sudo -u postgres pg_basebackup -D /var/cloudconductor/backups/postgresql --xlog --verbose -h ${primary_ip_address} -U replication; sudo -u root rm -rf /var/lib/pgsql/9.4/data; sudo -u root mv /var/cloudconductor/backups/postgresql /var/lib/pgsql/9.4/data; sudo -u root chown -R postgres:postgres /var/lib/pgsql/9.4/data; sudo -u root chmod 700 /var/lib/pgsql/9.4/data; sudo -u root mkdir -p /var/cloudconductor/backups/postgresql; sudo -u root chown amandabackup:disk /var/cloudconductor/backups/postgresql; sudo -u root chmod 777 /var/cloudconductor/backups/postgresql; sudo -u root mv /var/lib/pgsql/9.4/data/recovery.done /var/lib/pgsql/9.4/data/recovery.conf; sudo -u root sed -ri "s/host=[^ ]+ /host=${primary_ip_address} /" /var/lib/pgsql/9.4/data/recovery.conf; sudo -u root service postgresql-9.4 start; target_hosts=(`curl -X GET "http://localhost:8500/v1/kv/cloudconductor/servers?recurse&token=${CONSUL_SECRET_KEY_ENCODED}" | jq ''.[].Key'' | sed -e ''s/[^"]*"\([^"]*\)".*/\1/'' | awk -F/ ''{print $3}'' | while read server_name; do curl -X GET "http://localhost:8500/v1/kv/cloudconductor/servers/${server_name}?token=${CONSUL_SECRET_KEY_ENCODED}" | jq ''.[].Value'' | sed -e ''s/[^"]*"\([^"]*\)".*/\1/'' | base64 -d | jq ''.roles'' | grep "\"ap\"" > /dev/null; if [ $? -eq 0 ]; then echo ${server_name}; fi; done;`); target_hosts_concatenated="`echo ${target_hosts[@]} | sed -e ''s/ /|/g''`"; configure_event_id=`/usr/local/bin/consul event -name="configure" -node="${target_hosts_concatenated}" "${CONSUL_SECRET_KEY}" | awk ''{print $3}''`; for server_name in ${target_hosts[@]}; do while true; do return_code=`curl http://localhost:8500/v1/kv/event/${configure_event_id}/${server_name}?token=${CONSUL_SECRET_KEY_ENCODED} | jq ''.[] | .Value'' | sed -e ''s/[^"]*"\([^"]*\)".*/\1/'' | base64 -d | jq ''.return_code'' | sed -e ''s/[^"]*"\([^"]*\)".*/\1/''`; if [ "${return_code}" == "null" -o -z "${return_code}" ]; then sleep 10; continue; elif [ "${return_code}" == "0" ]; then break; else exit 1; fi; done; done; fi) >/dev/null 2>&1'
      restore_enabled: true
  privileges:
    - user: postgres
      command: /usr/bin/pg_basebackup
    - user: root
      command: /bin/chmod
    - user: root
      command: /bin/chown
    - user: root
      command: /bin/mkdir
    - user: root
      command: /bin/mv
    - user: root
      command: /bin/rm
    - user: root
      command: /bin/sed
    - user: root
      command: /sbin/service
